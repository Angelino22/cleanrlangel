import os
import random
import time
from dataclasses import dataclass

import gymnasium as gym
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import tyro
from stable_baselines3.common.buffers import ReplayBuffer
from torch.utils.tensorboard import SummaryWriter
from pettingzoo.atari import foozpong_v3
import wandb

@dataclass
class Args:
    exp_name: str = os.path.basename(__file__)[: -len(".py")]
    """the name of this experiment"""
    seed: int = 1
    """seed of the experiment"""
    torch_deterministic: bool = True
    """if toggled, `torch.backends.cudnn.deterministic=False`"""
    cuda: bool = True
    """if toggled, cuda will be enabled by default"""
    track: bool = False
    """if toggled, this experiment will be tracked with Weights and Biases"""
    wandb_project_name: str = "FOOZPONG"
    """the wandb's project name"""
    wandb_entity: str = None
    """the entity (team) of wandb's project"""
    capture_video: bool = False
    """whether to capture videos of the agent performances (check out `videos` folder)"""
    save_model: bool = False
    """whether to save model into the `runs/{run_name}` folder"""
    upload_model: bool = False
    """whether to upload the saved model to huggingface"""
    hf_entity: str = ""
    """the user or org name of the model repository from the Hugging Face Hub"""

    # Algorithm specific arguments
    env_id: str = "foozpong_v3"
    """the id of the environment"""
    total_timesteps: int = 10000000
    """total timesteps of the experiments"""
    learning_rate: float = 1e-4
    """the learning rate of the optimizer"""
    buffer_size: int = 1000000
    """the replay memory buffer size"""
    gamma: float = 0.99
    """the discount factor gamma"""
    tau: float = 1.0
    """the target network update rate"""
    target_network_frequency: int = 1000
    """the timesteps it takes to update the target network"""
    batch_size: int = 32
    """the batch size of sample from the reply memory"""
    start_e: float = 1
    """the starting epsilon for exploration"""
    end_e: float = 0.01
    """the ending epsilon for exploration"""
    exploration_fraction: float = 0.10
    """the fraction of `total-timesteps` it takes from start-e to go end-e"""
    learning_starts: int = 80000
    """timestep to start learning"""
    train_frequency: int = 4
    """the frequency of training"""

# ALGO LOGIC: initialize agent here:
class QNetwork(nn.Module):
    def __init__(self, action_space):
        super().__init__()
        self.network = nn.Sequential(
            nn.Conv2d(4, 32, 8, stride=4),
            nn.ReLU(),
            nn.Conv2d(32, 64, 4, stride=2),
            nn.ReLU(),
            nn.Conv2d(64, 64, 3, stride=1),
            nn.ReLU(),
            nn.Flatten(),
            nn.Linear(3136, 512),
            nn.ReLU(),
            nn.Linear(512, action_space),
        )

    def forward(self, x):
        return self.network(x / 255.0)

def linear_schedule(start_e: float, end_e: float, duration: int, t: int):
    slope = (end_e - start_e) / duration
    return max(slope * t + start_e, end_e)

def make_env(env_id, seed, capture_video, run_name):
    def thunk():
        env = foozpong_v3.env(render_mode="rgb_array" if capture_video else None)
        env = gym.wrappers.RecordEpisodeStatistics(env)
        env = gym.wrappers.ClipRewardEnv(env)
        env = gym.wrappers.ResizeObservation(env, (84, 84))
        env = gym.wrappers.GrayScaleObservation(env)
        env = gym.wrappers.FrameStack(env, 4)
        env.action_space.seed(seed)
        return env
    return thunk

if __name__ == "__main__":
    args = tyro.cli(Args)
    run_name = f"{args.env_id}__{args.exp_name}__{args.seed}__{int(time.time())}"
    
    if args.track:
        wandb.init(
            project=args.wandb_project_name,
            entity=args.wandb_entity,
            sync_tensorboard=True,
            config=vars(args),
            name=run_name,
            monitor_gym=True,
            save_code=True,
        )
    writer = SummaryWriter(f"runs/{run_name}")
    writer.add_text(
        "hyperparameters",
        "|param|value|\n|-|-|\n%s" % ("\n".join([f"|{key}|{value}|" for key, value in vars(args).items()])),
    )

    # TRY NOT TO MODIFY: seeding
    random.seed(args.seed)
    np.random.seed(args.seed)
    torch.manual_seed(args.seed)
    torch.backends.cudnn.deterministic = args.torch_deterministic

    device = torch.device("cuda" if torch.cuda.is_available() and args.cuda else "cpu")

    # env setup
    env = make_env(args.env_id, args.seed, args.capture_video, run_name)()
    env.reset(seed=args.seed)

    # Initialize agent networks and optimizers
    agents = env.possible_agents
    action_space = env.action_space(agents[0]).n
    q_networks = {agent: QNetwork(action_space).to(device) for agent in agents}
    target_networks = {agent: QNetwork(action_space).to(device) for agent in agents}
    optimizers = {agent: optim.Adam(q_networks[agent].parameters(), lr=args.learning_rate) for agent in agents}

    # Load target networks with initial Q-network weights
    for agent in agents:
        target_networks[agent].load_state_dict(q_networks[agent].state_dict())

    rb = ReplayBuffer(
        args.buffer_size,
        env.observation_space(agents[0]),
        env.action_space(agents[0]),
        device,
        optimize_memory_usage=True,
        handle_timeout_termination=False,
    )
    start_time = time.time()

    # TRY NOT TO MODIFY: start the game
    obs, _ = env.reset(seed=args.seed)
    for global_step in range(args.total_timesteps):
        # ALGO LOGIC: put action logic here
        epsilon = linear_schedule(args.start_e, args.end_e, args.exploration_fraction * args.total_timesteps, global_step)
        actions = {}
        for agent in agents:
            if random.random() < epsilon:
                actions[agent] = env.action_space(agent).sample()
            else:
                q_values = q_networks[agent](torch.Tensor(obs[agent]).unsqueeze(0).to(device))
                actions[agent] = torch.argmax(q_values, dim=1).cpu().numpy()[0]

        # TRY NOT TO MODIFY: execute the game and log data.
        next_obs, rewards, terminations, truncations, infos = env.step(actions)
        
        # Log episodic return and length for each agent
        if "final_info" in infos[agents[0]]:
            for agent in agents:
                if "episode" in infos[agent]["final_info"]:
                    print(f"global_step={global_step}, episodic_return={infos[agent]['final_info']['episode']['r']}")
                    writer.add_scalar(f"charts/episodic_return_{agent}", infos[agent]['final_info']['episode']['r'], global_step)
                    writer.add_scalar(f"charts/episodic_length_{agent}", infos[agent]['final_info']['episode']['l'], global_step)
                    if args.track:
                        wandb.log({f"episodic_return_{agent}": infos[agent]['final_info']['episode']['r']}, step=global_step)
                        wandb.log({f"episodic_length_{agent}": infos[agent]['final_info']['episode']['l']}, step=global_step)

        # Handle next observation for each agent and add to replay buffer
        real_next_obs = next_obs.copy()
        for idx, agent in enumerate(agents):
            if truncations[agent]:
                real_next_obs[agent] = infos[agent]["final_observation"]
            rb.add(obs[agent], real_next_obs[agent], actions[agent], rewards[agent], terminations[agent], infos[agent])

        # Update observations
        obs = next_obs

        # ALGO LOGIC: training
        if global_step > args.learning_starts and global_step % args.train_frequency == 0:
            for agent in agents:
                data = rb.sample(args.batch_size)
                with torch.no_grad():
                    target_max, _ = target_networks[agent](data.next_observations).max(dim=1)
                    td_target = data.rewards.flatten() + args.gamma * target_max * (1 - data.dones.flatten())
                old_val = q_networks[agent](data.observations).gather(1, data.actions).squeeze()
                loss = F.mse_loss(td_target, old_val)

                if global_step % 100 == 0:
                    writer.add_scalar(f"losses/td_loss_{agent}", loss, global_step)
                    writer.add_scalar(f"losses/q_values_{agent}", old_val.mean().item(), global_step)
                    if args.track and agent == agents[0]:
                        wandb.log({f"td_loss_{agent}": loss.item()}, step=global_step)
                        wandb.log({f"q_values_{agent}": old_val.mean().item()}, step=global_step)
                    print(f"SPS: {int(global_step / (time.time() - start_time))}")
                    writer.add_scalar("charts/SPS", int(global_step / (time.time() - start_time)), global_step)
                    if args.track:
                        wandb.log({"SPS": int(global_step / (time.time() - start_time))}, step=global_step)

                # Optimize the model
                optimizers[agent].zero_grad()
                loss.backward()
                optimizers[agent].step()

            # Update target networks
            if global_step % args.target_network_frequency == 0:
                for agent in agents:
                    for target_network_param, q_network_param in zip(target_networks[agent].parameters(), q_networks[agent].parameters()):
                        target_network_param.data.copy_(
                            args.tau * q_network_param.data + (1.0 - args.tau) * target_network_param.data
                        )

    if args.save_model:
        for agent in agents:
            model_path = f"runs/{run_name}/{args.exp_name}_{agent}.cleanrl_model"
            torch.save(q_networks[agent].state_dict(), model_path)
            print(f"model saved to {model_path}")
            from cleanrl_utils.evals.dqn_eval import evaluate

            episodic_returns = evaluate(
                model_path,
                make_env,
                args.env_id,
                eval_episodes=10,
                run_name=f"{run_name}-eval",
                Model=QNetwork,
                device=device,
                epsilon=0.05,
            )
            for idx, episodic_return in enumerate(episodic_returns):
                writer.add_scalar(f"eval/episodic_return_{agent}", episodic_return, idx)
                if args.track:
                    wandb.log({f"eval/episodic_return_{agent}": episodic_return}, step=idx)

            if args.upload_model:
                from cleanrl_utils.huggingface import push_to_hub

                repo_name = f"{args.env_id}-{args.exp_name}-seed{args.seed}-{agent}"
                repo_id = f"{args.hf_entity}/{repo_name}" if args.hf_entity else repo_name
